name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write
  attestations: write

  
jobs:
  prepare-release:
    runs-on: ubuntu-latest
    environment:
      name: prod
    outputs:
      should_release: ${{ steps.bump.outputs.should_release }}
      docs_only: ${{ steps.bump.outputs.docs_only }}
      snapshot_docs: ${{ steps.bump.outputs.snapshot_docs }}
      version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump type
        id: bump
        shell: bash
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          TYPE=$(printf '%s\n' "$COMMIT_MSG" | awk '
            match($0, /\[(MAJOR|MINOR|PATCH)\]/, m) {
              print tolower(m[1])
              exit
            }
          ')
          if [[ -n "$TYPE" ]]; then
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "docs_only=false" >> "$GITHUB_OUTPUT"
            echo "type=$TYPE" >> "$GITHUB_OUTPUT"
            if [[ "$TYPE" == "major" || "$TYPE" == "minor" ]]; then
              echo "snapshot_docs=true" >> "$GITHUB_OUTPUT"
            else
              echo "snapshot_docs=false" >> "$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          if printf '%s\n' "$COMMIT_MSG" | grep -q '\[DOCS\]'; then
            echo "::notice::Running docs-only publication workflow."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            echo "docs_only=true" >> "$GITHUB_OUTPUT"
            echo "snapshot_docs=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ "$COMMIT_MSG" =~ ^release:\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "::notice::Skipping release workflow for release commit."
          else
            echo "::notice::Skipping release workflow because commit message does not specify [MAJOR|MINOR|PATCH] or [DOCS]."
          fi
          echo "should_release=false" >> "$GITHUB_OUTPUT"
          echo "docs_only=false" >> "$GITHUB_OUTPUT"
          echo "snapshot_docs=false" >> "$GITHUB_OUTPUT"

      - name: Set up Node.js
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: npm
          cache-dependency-path: |
            package-lock.json
            docs/package-lock.json

      - name: Install dependencies
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        run: npm ci

      - name: Install docs dependencies
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        working-directory: docs
        run: npm ci

      - name: Bump package version
        if: steps.bump.outputs.should_release == 'true'
        id: version
        run: |
          npm version ${{ steps.bump.outputs.type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Compile TypeScript
        if: steps.bump.outputs.should_release == 'true'
        run: npm run compile

      - name: Snapshot docs version
        if: steps.bump.outputs.should_release == 'true' && steps.bump.outputs.snapshot_docs == 'true'
        working-directory: docs
        run: npm run docusaurus docs:version ${{ steps.version.outputs.new_version }}

      - name: Setup commit signing
        if: steps.bump.outputs.should_release == 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_GPG_KEY }}
          passphrase: ${{ secrets.ACTIONS_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Build docs
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        working-directory: docs
        run: npm run build

      - name: Commit release artifacts
        if: steps.bump.outputs.should_release == 'true'
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes detected; aborting release."
            exit 1
          fi
          git commit -S -m "release: v${{ steps.version.outputs.new_version }}"
          git push origin HEAD:main

      - name: Upload docs artifact
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/build
            
      - name: Deploy to GitHub Pages
        if: steps.bump.outputs.should_release == 'true' || steps.bump.outputs.docs_only == 'true'
        uses: actions/deploy-pages@v4
        id: deploy

  build-linux:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        run: npm ci

      - name: Build SEA binaries (linux)
        env:
          SEA_TARGETS: linux-arm64,linux-x64
        run: npm run build:sea

      - name: Package binaries
        run: |
          mkdir -p release-artifacts
          for name in tfgql-linux-arm64 tfgql-linux-x64; do
            tar -C build/sea/binaries -czf release-artifacts/${name}.tar.gz ${name}
            sha256sum release-artifacts/${name}.tar.gz > release-artifacts/${name}.tar.gz.sha256
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sea-linux
          path: release-artifacts

  build-macos-arm:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: macos-latest
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        run: npm ci

      - name: Build SEA binary (darwin arm64)
        run: npm run build:sea -- --scope=current

      - name: Package darwin arm64 binary
        run: |
          mkdir -p release-artifacts
          tar -C build/sea/binaries -czf release-artifacts/tfgql-darwin-arm64.tar.gz tfgql-darwin-arm64
          shasum -a 256 release-artifacts/tfgql-darwin-arm64.tar.gz > release-artifacts/tfgql-darwin-arm64.tar.gz.sha256

      - name: Upload macOS arm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sea-macos-arm
          path: release-artifacts

  build-macos-intel:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: macos-latest-large
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          architecture: 'x64'

      - name: Install dependencies
        run: npm ci

      - name: Build SEA binary (darwin x64)
        run: npm run build:sea -- --scope=current

      - name: Package darwin x64 binary
        run: |
          mkdir -p release-artifacts
          tar -C build/sea/binaries -czf release-artifacts/tfgql-darwin-x64.tar.gz tfgql-darwin-x64
          shasum -a 256 release-artifacts/tfgql-darwin-x64.tar.gz > release-artifacts/tfgql-darwin-x64.tar.gz.sha256

      - name: Upload macOS intel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sea-macos-intel
          path: release-artifacts

  build-windows:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: windows-latest
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        run: npm ci

      - name: Build SEA binary (windows x64)
        run: npm run build:sea -- --scope=current

      - name: Package windows binary
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release-artifacts | Out-Null
          tar -C build/sea/binaries -czf release-artifacts/tfgql-win-x64.tar.gz tfgql-win-x64.exe
          $hash = (Get-FileHash release-artifacts/tfgql-win-x64.tar.gz -Algorithm SHA256).Hash.ToLower()
          "$hash  tfgql-win-x64.tar.gz" | Out-File release-artifacts/tfgql-win-x64.tar.gz.sha256 -Encoding ascii

      - name: Upload windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sea-windows
          path: release-artifacts

  publish-release:
    needs: [prepare-release, build-linux, build-macos-arm, build-macos-intel, build-windows]
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure git identity
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_GPG_KEY }}
          passphrase: ${{ secrets.ACTIONS_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Disable commit signing when no GPG key
        run: git config commit.gpgsign false

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: sea-linux
          path: release-artifacts

      - name: Download macOS arm artifacts
        uses: actions/download-artifact@v4
        with:
          name: sea-macos-arm
          path: release-artifacts

      - name: Download macOS intel artifacts
        uses: actions/download-artifact@v4
        with:
          name: sea-macos-intel
          path: release-artifacts

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: sea-windows
          path: release-artifacts

      - name: Generate Homebrew formula
        run: |
          mkdir -p release-artifacts/homebrew
          VERSION=${{ needs.prepare-release.outputs.version }}
          ARM_SHA=$(cut -d ' ' -f1 release-artifacts/tfgql-darwin-arm64.tar.gz.sha256)
          X64_SHA=$(cut -d ' ' -f1 release-artifacts/tfgql-darwin-x64.tar.gz.sha256)
          node scripts/update-homebrew-formula.mjs \
            --version "$VERSION" \
            --arm-url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tfgql-darwin-arm64.tar.gz" \
            --arm-sha "$ARM_SHA" \
            --arm-binary "tfgql-darwin-arm64" \
            --x64-url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tfgql-darwin-x64.tar.gz" \
            --x64-sha "$X64_SHA" \
            --x64-binary "tfgql-darwin-x64" \
            --output release-artifacts/homebrew/tfgql.rb

      - name: Create tag
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          if [[ -n "${{ secrets.ACTIONS_GPG_KEY }}" && -n "${{ secrets.ACTIONS_GPG_PASSPHRASE }}" ]]; then
            git tag -s v${VERSION} -m "Release v${VERSION}"
          else
            git tag -a v${VERSION} -m "Release v${VERSION}"
          fi
          git push origin v${VERSION}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: v${{ needs.prepare-release.outputs.version }}
          generate_release_notes: true
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.sha256
            release-artifacts/homebrew/tfgql.rb

      - name: Update Homebrew tap
        env:
          TAP_TOKEN: ${{ secrets.TAP_PUSH_TOKEN }}
          VERSION: ${{ needs.prepare-release.outputs.version }}
        run: |
          if [ -z "$TAP_TOKEN" ]; then
            echo "TAP_PUSH_TOKEN not set; skipping tap update."
          else
            git clone https://$TAP_TOKEN@github.com/jeremymefford/homebrew-tfgql.git tap
            cp release-artifacts/homebrew/tfgql.rb tap/Formula/tfgql.rb
            cd tap
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            if git diff --quiet; then
              echo "Homebrew tap already up to date."
            else
              git commit -am "tfgql ${VERSION}"
              git push origin HEAD:main
            fi
          fi

  publish-image:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=v${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Set build metadata
        id: build_meta
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "build_date=$BUILD_DATE" >> "$GITHUB_OUTPUT"

      - name: Build & push (multi-arch, SBOM, provenance)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ steps.build_meta.outputs.build_date }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign images with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | while read -r tag; do
            [ -z "$tag" ] && continue
            cosign sign --yes "$tag"
          done

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
